#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>

// 콜백 함수의 인자로 사용할 구조체 정의
struct FileStruct {
  FILE *file; // 파일 포인터
  char *filename; // 파일 이름
};

// 콜백 함수 정의
static size_t WriteFileCallback(void *contents, size_t size, size_t nmemb, void *userp)
{
  size_t realsize = size * nmemb;
  struct FileStruct *file = (struct FileStruct *)userp;

  // 파일이 열려있지 않으면 파일 이름으로 열기
  if (file->file == NULL) {
    file->file = fopen(file->filename, "wb");
    if (file->file == NULL) {
      printf("파일을 열 수 없습니다: %s\n", file->filename);
      return 0;
    }
  }

  // 파일에 데이터 쓰기
  size_t written = fwrite(contents, size, nmemb, file->file);
  return written;
}

// 웹 페이지의 내용을 읽어오는 함수
char *readWebPage(char *url) {
  CURL *curl_handle;
  CURLcode res;

  char *buffer = NULL; // 웹 페이지의 내용을 저장할 버퍼
  size_t size = 0; // 버퍼의 크기

  curl_handle = curl_easy_init(); // curl 객체 생성
  if(curl_handle) {
    curl_easy_setopt(curl_handle, CURLOPT_URL, url); // 웹 페이지의 URL 설정
    curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback); // 콜백 함수 설정
    curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&buffer); // 콜백 함수의 인자로 버퍼 전달
    curl_easy_setopt(curl_handle, CURLOPT_USERAGENT, "libcurl-agent/1.0"); // 유저 에이전트 설정

    res = curl_easy_perform(curl_handle); // 웹 페이지의 내용 읽어오기

    if(res != CURLE_OK) {
      fprintf(stderr, "curl_easy_perform() failed: %s\n",
              curl_easy_strerror(res));
    }
    else {
      printf("%lu bytes retrieved\n", (unsigned long)size);
    }

    curl_easy_cleanup(curl_handle); // curl 객체 해제
  }

  return buffer; // 웹 페이지의 내용 반환
}

// 파일을 다운로드하는 함수
void downloadFile(char *url, char *filename) {
  CURL *curl_handle;
  CURLcode res;

  struct FileStruct file; // 콜백 함수의 인자로 사용할 구조체
  file.file = NULL; // 파일 포인터 초기화
  file.filename = filename; // 파일 이름 설정

  curl_handle = curl_easy_init(); // curl 객체 생성
  if(curl_handle) {
    curl_easy_setopt(curl_handle, CURLOPT_URL, url); // 파일의 URL 설정
    curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteFileCallback); // 콜백 함수 설정
    curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&file); // 콜백 함수의 인자로 구조체 전달

    res = curl_easy_perform(curl_handle); // 파일 다운로드

    if(res != CURLE_OK) {
      fprintf(stderr, "curl_easy_perform() failed: %s\n",
              curl_easy_strerror(res));
    }
    else {
      printf("파일을 다운로드했습니다: %s\n", filename);
    }

    curl_easy_cleanup(curl_handle); // curl 객체 해제
  }

  if (file.file) {
    fclose(file.file); // 파일 닫기
  }
}

int main(void)
{
  char *url = "http://13.124.115.172/upgrade/up.php"; // 웹 페이지의 URL
  char *filename = "downloaded_file"; // 다운로드할 파일의 이름
  int delay = 10; // 반복할 시간 간격 (초)

  curl_global_init(CURL_GLOBAL_ALL); // curl 라이브러리 초기화

  while(1) { // 무한 루프 시작
    char *buffer = readWebPage(url); // 웹 페이지의 내용 읽어오기
    if (buffer) {
      if (strstr(buffer, "http") != NULL) { // 웹 페이지의 내용이 링크인지 확인
        downloadFile(buffer, filename); // 링크의 파일을 다운로드
      }
      else {
        printf("링크가 없습니다.\n");
      }
      free(buffer); // 버퍼 해제
    }
    sleep(delay); // 일정 시간 대기
  }

  curl_global_cleanup(); // curl 라이브러리 해제

  return 0;
}
