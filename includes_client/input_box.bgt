const string& input_box_pro(const string& in text, const string& in defv = empty, bool secure_input = false, int min_length = 0, int max_length = 0, int input_mode = 0, bool auto_send = false)
{
int cursor = 0;
string[] ms;
string message;
speak(text);
if (!characters.is_empty()) speech_stop_level = 1;
for (; ; )
{
wait(connected ? maintime : 5);
mouse_update();
keyboard_update();
if (connected)
{
sr_loop();
}
string char = input_characters();
if (!char.is_empty())
{
speech_stop_level = 1;
if (input_mode == 1)
{
if (string_is_alphanumeric(char)) {}
else if (char == " ") {}
else char.resize(0);
}
else if (input_mode == 2)
{
if (!string_is_digits(char))
{
int hash = character_to_ascii(char);
if (hash == ascii_a or hash == ascii_cap_a)
{
message.resize(0);
char = "a";
}
else char.resize(0);
}
}
}
int cs = char.size;
if (cs > 0)
{
if (secure_input) p.play_stationary("secure_input.ogg", false);
else if (input_mode > 0 and connected) send_reliable("codeclick", 2);
else if (input_mode > -1) spool.play_stationary("key" + random(1, 3) + ".ogg", false);
if (charrepeat == 1) speakchar(char);
if (cs == 3)
{
ms.insert_at(cursor, string_left(char, 2));
cursor++;
ms.insert_at(cursor, string_right(char, 1));
}
else if (cs == 4)
{
ms.insert_at(cursor, string_left(char, 2));
cursor++;
ms.insert_at(cursor, string_right(char, 2));
}
else ms.insert_at(cursor, char);
cursor++;
}
if (key_pressed(KEY_ESCAPE))
{
speak("취소되었습니다.");
return empty;
}
if (key_pressed(KEY_TAB)) speak(text);
if ((key_pressed(KEY_DOWN) or key_pressed(KEY_UP)) and control_is_down == 0)
{
if (secure_input) p.play_stationary("secure_input.ogg", false);
else
{
string a;
int mslength = ms.length;
for (uint i = 0; i < mslength; i++)
{
a += ms[i];
}
speak(a);
}
}
if (shift_is_down)
{
if (key_pressed(KEY_BACK))
{ 
speak(message + ": 모두 삭제됨.");
spool.play_stationary("keydelete.ogg", false);
ms.resize(0);
cursor = 0;
continue;
}
if (key_pressed(KEY_RETURN))
{
speak("엔터");
ms.insert_at(cursor, "\r\n");
cursor++;
spool.play_stationary("key" + random(1, 3) + ".ogg", false);
continue;
}
}
if (control_is_down > 0)
{
if (key_pressed(KEY_V))
{
string cl = clipboard_read_text();
int clength = cl.size;
ms.reserve(ms.length + clength);
for (uint i = 0; i < clength; i++)
{
int index = character_to_ascii(cl[i]);
if (index >= 128)
{
if (clength == i + 1)
{
ms.insert_at(cursor, cl[i]);
cursor++;
break;
}
ms.insert_at(cursor, cl[i] + cl[i + 1]);
cursor++;
i++;
continue;
}
if (clength > (i + 1))
{
if (index == 13 and character_to_ascii(cl[i + 1]) == 10)
{
ms.insert_at(cursor, cl[i] + cl[i + 1]);
cursor++;
i++;
continue;
}
}
ms.insert_at(cursor, cl[i]);
cursor++;
}
speak("클립보드에서 붙여넣기했습니다.");
continue;
}
if (key_pressed(KEY_C))
{
if (!secure_input)
{
string a;
int mslength = ms.length;
for (uint i = 0; i < mslength; i++)
{
a += ms[i];
}
speak("입력 내용을 클립보드로 복사했습니다.");
clipboard_copy_text(a);
continue;
}
}
}
if (((max_length > 0 and max_length == ms.length) or (max_length <= 0 and ms.length > 0)) and auto_send)
{
int mslength = ms.length;
for (uint i = 0; i < mslength; i++)
{
message += ms[i];
}
keys_pressed();
force_all_keys_up();
ref_string = message;
return ref_string;
}
if (alt_is_down)
{
if (key_pressed(KEY_C))
{
speak("대화상자 내용을 클립보드로 복사했습니다.");
clipboard_copy_text(text);
continue;
}
}
if (key_pressed(KEY_F3))
{
if (capmode == 0)
{
capmode = 1;
speak("대문자 말하기를 켭니다.");
p.play_stationary("wpingon.ogg", false);
}
else
{
capmode = 0;
speak("대문자 말하기를 끕니다.");
p.play_stationary("wpingoff.ogg", false);
}
}
if (key_pressed(KEY_F2))
{
if (charrepeat == 1)
{
p.play_stationary("wpingoff.ogg", false);
speak("입력 글자 읽기를 끕니다.");
charrepeat = 0;
}
else
{
p.play_stationary("wpingon.ogg", false);
speak("입력 글자 읽기를 켭니다.");
charrepeat = 1;
}
}
if (key_pressed(KEY_F5))
{
if (defv.is_empty()) speak("기본값이 없는 편집창입니다.");
else speak(defv);
}
if (key_pressed(KEY_F6))
{
if (defv.is_empty()) speak("기본값이 없는 편집창입니다.");
else
{
clipboard_copy_text(defv);
speak("기본값을 클립보드로 복사합니다.");
}
}
if (ms.is_empty())
{
if (key_pressed(KEY_RETURN))
{
if (!defv.is_empty())
{
spool.play_stationary("keyreturn.ogg", false);
ref_string = defv;
return ref_string;
}
}
}
else
{
if (cursor > 0)
{
int move_level = 0;
if (key_pressed(KEY_LEFT))
{
if (control_is_down > 0) move_level = 2;
else if (alt_is_down) move_level = 3;
else move_level = 1;
}
if (move_level > 1)
{
int current_cursor = cursor - 1;
int start_cursor = 0;
bool found = false;
for (int i = current_cursor; i > -1; i--)
{
if (move_level == 2)
{
if (ms[i] == " ")
{
start_cursor = i;
found = true;
continue;
}
if (ms[i] == "　")
{
start_cursor = i;
found = true;
continue;
}
}
if (ms[i] == "\r\n")
{
start_cursor = i;
found = true;
continue;
}
if (ms[i] == "\n")
{
start_cursor = i;
found = true;
continue;
}
if (ms[i] == "\r")
{
start_cursor = i;
found = true;
continue;
}
if (found) break;
}
cursor = start_cursor;
if (secure_input) speak("미정의 문자");
else
{
string res;
if (current_cursor >= ms.length) current_cursor = ms.length - 1;
for (uint i = cursor; i <= current_cursor; i++) res += ms[i];
speak(res);
}
}
else if (move_level == 1)
{
cursor--;
if (cursor >= ms.length) speak("빈줄");
else if (secure_input) speak("미정의 문자");
else speakchar(ms[cursor]);
}
if (key_pressed(KEY_BACK))
{
if (secure_input) speak("미정의 문자");
else speakchar(ms[cursor - 1]);
ms.remove_at(cursor - 1);
cursor--;
spool.play_stationary("keydelete.ogg", false);
}
}
if (cursor < ms.length)
{
int move_level = 0;
if (key_pressed(KEY_RIGHT))
{
if (control_is_down > 0) move_level = 2;
else if (alt_is_down) move_level = 3;
else move_level = 1;
}
if (move_level > 1)
{
int current_cursor = cursor;
int end_cursor = -1;
int length = ms.length - 1;
bool found = false;
for (int i = cursor + 1; i <= length; i++)
{
if (move_level == 2)
{
if (ms[i] == " ")
{
end_cursor = i;
found = true;
continue;
}
if (ms[i] == "　")
{
end_cursor = i;
found = true;
continue;
}
}
if (ms[i] == "\r\n")
{
end_cursor = i;
found = true;
continue;
}
if (ms[i] == "\n")
{
end_cursor = i;
found = true;
continue;
}
if (ms[i] == "\r")
{
end_cursor = i;
found = true;
continue;
}
if (found) break;
}
if (end_cursor == -1) cursor = ms.length;
else cursor = end_cursor + 1;
if (secure_input) speak("미정의 문자");
else
{
string res;
for (uint i = current_cursor; i < cursor; i++) res += ms[i];
speak(res);
}
}
else if (move_level == 1)
{
cursor++;
if (cursor >= ms.length) speak("빈줄");
else if (secure_input) speak("미정의 문자");
else speakchar(ms[cursor]);
}
if (key_pressed(KEY_DELETE))
{
if (secure_input) speak("미정의 문자");
else speakchar(ms[cursor]);
ms.remove_at(cursor);
spool.play_stationary("keydelete.ogg", false);
}
}
if (key_pressed(KEY_HOME) or (key_pressed(KEY_UP) and control_is_down > 0))
{
cursor = 0;
if (cursor >= ms.length) speak("빈줄");
else if (secure_input) speak("미정의 문자");
else speakchar(ms[cursor]);
}
if (key_pressed(KEY_END) or (key_pressed(KEY_DOWN) and control_is_down > 0))
{
cursor = ms.length;
speak("문자열 끝지점");
}
if (key_pressed(KEY_RETURN))
{
if (min_length > 0 and ms.length < min_length)
{
speak(min_length + "글자 이상 입력해야 합니다.");
continue;
}
if (max_length > 0 and ms.length > max_length)
{
speak(max_length + "글자 이하로 입력해야 합니다.");
continue;
}
spool.play_stationary("keyreturn.ogg", false);
int mslength = ms.length;
for (uint i = 0; i < mslength; i++)
{
message += ms[i];
}
keys_pressed();
ref_string = message;
return ref_string;
}
}
}
return empty;
}

void speakchar(string char)
{
if (char == " ")
{
speak("스페이스");
return;
}
else if (char == "\r\n")
{
speak("엔터");
return;
}
else if (char == "\r")
{
speak("carriage return");
return;
}
else if (char == "\n")
{
speak("line feed");
return;
}
else
{
if (capmode == 1)
{
if (string_is_upper_case(char))
{
speak("대문자 " + char);
return;
}
}
speak(char);
}
}

const string& number_builder(const string& in mess, int def)
{
string tempval = input_box_pro(mess, def);
if (tempval.is_empty()) return empty;
int ascii_temp = character_to_ascii(tempval);
switch (ascii_temp)
{
case ascii_plus:
ref_string = int(string_to_number(def) + string_to_number(tempval));
break;
case ascii_under_bar:
tempval = string_replace(tempval, "_", empty, false);
ref_string = int(string_to_number(def) - string_to_number(tempval));
break;
case ascii_star:
tempval = string_replace(tempval, "*", empty, false);
ref_string = int(string_to_number(def) * string_to_number(tempval));
break;
case ascii_slash:
{
tempval = string_replace(tempval, "/", empty, false);
int stn = string_to_number(tempval);
if (stn == 0) ref_string = "0";
else ref_string = int(string_to_number(def) / stn);
}
break;
default:
ref_string = string_to_number(tempval);
}
return ref_string;
}

double number_builder_pro(const string& in mess, double def)
{
string tempval = input_box_pro(mess, def);
if (tempval.is_empty())
{
speak("취소되었습니다.");
return def;
}
int ascii_temp = character_to_ascii(tempval);
double tempnum = 0;
switch (ascii_temp)
{
case ascii_plus:
tempnum = string_to_number(def) + string_to_number(tempval);
break;
case ascii_under_bar:
tempval = string_replace(tempval, "_", empty, false);
tempnum = string_to_number(def) - string_to_number(tempval);
break;
case ascii_star:
tempval = string_replace(tempval, "*", empty, false);
tempnum = string_to_number(def) * string_to_number(tempval);
break;
case ascii_slash:
{
tempval = string_replace(tempval, "/", empty, false);
int stn = string_to_number(tempval);
if (stn == 0) tempnum = 0;
else tempnum = string_to_number(def) / stn;
}
break;
default:
tempnum = string_to_number(tempval);
}
if (tempnum == def) speak("취소되었습니다.");
else speak("완료.");
return tempnum;
}

bool& text_builder(const string& in what)
{
int messagelength = what.size;
if (messagelength == 0) return false_t;
for (uint counter = 0; counter < messagelength; counter++)
{
if (filterchars.exists(what[counter])) return false_t;
}
return true_t;
}