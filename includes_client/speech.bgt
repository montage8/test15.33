int speech_stop_level = 0;
bool play_braille = false;
bool use_xvsrd = false;
library@ xv;
int autointerrupt = 1;


bool speak(string text, int interrupt = autointerrupt, bool wait = false, bool translate = translator)
{
if (muted) return false_t;
if (translate) text = translate_text(text);
if (visualmode == 1)
{
game_window_title = text;
return true_t;
}
if (df_s.mode == 0) df_s.output = df_s.check_available_outputs();
else df_s.output = 0;
if (df_s.output > 0)
{
if (play_braille) screen_reader_braille(df_s.output, text);
if (interrupt == 0) return screen_reader_speak(df_s.output, text);
return screen_reader_speak_interrupt(df_s.output, text);
}
if (!use_xvsrd or df_s.mode > 0)
{
if (interrupt == 0)
{
if (wait) return df_s.t.speak_wait(text);
return df_s.t.speak(text);
}
if (wait) return df_s.t.speak_interrupt_wait(text);
return df_s.t.speak_interrupt(text);
}
if (interrupt != 0) xv.call("void stopspeaking();");
dictionary d = xv.call("int speak(char*);", text);
int e = -1;
if (!d.get("0", e))
{
use_xvsrd = false;
return false_t;
}
if (e == 0)
{
use_xvsrd = false;
return false_t;
}
return true_t;
}

bool& find_xvsrd()
{
if (!file_exists("sensereaderspeech.dll")) return false_t;
library new;
if (!new.load("sensereaderspeech.dll")) return false_t;
dictionary d = new.call("int sensereader_init();");
int e = -1;
if (!d.get("0", e)) return false_t;
if (e == 0) return false_t;
@ xv = new;
return true_t;
}

bool& speech_output_inrange(int speech_output)
{
if (speech_output < 1) return false_t;
if (speech_output > 4) return false_t;
return true_t;
}

int auto_select_screen_reader()
{
if (screen_reader_is_running(4)) return 4;
if (screen_reader_is_running(1)) return 1;
if (screen_reader_is_running(3)) return 3;
return 0;
}


void stop_speech()
{
if (df_s.output > 0) screen_reader_stop_speech(df_s.output);
else if (!use_xvsrd) df_s.t.stop();
else xv.call("void stopspeaking();");
}

// DFSpeech
// By DarkFlier Productions
// Created on 06 - 19 - 2016 through 06 - 20 - 2016

class DFSpeech
{
string filename; // The filename of the save file for speech settings.
string d;
int output; // Internal variable specifying the output mode.
tts_voice t; // Internal TTS variable
int mode = 0; // Variable for either SAPI or Auto SR output
int voice = 0;
int rate = 0;
int pitch = 0;
int volume = 0;

int check_available_outputs()
{
// function to check for running screen readers.
if (screen_reader_is_running(4)) return 4;
else if (screen_reader_is_running(1)) return 1;
else if (screen_reader_is_running(3)) return 3;
return 0;
}
bool& set_voice(int v)
{
// Function for setting the SAPI voice.
if (!t.set_current_voice(v))
{
voice = 0;
return false_t;
}
voice = v;
return true_t;
}
int select_voice()
{
// Spawns a menu where the user can select a SAPI voice.
string[]@ vn = t.voice_names;
int vp = -1;
for (; ; )
{
wait(connected ? maintime : 5);
mouse_update();
if (connected) sr_loop();
if (key_pressed(KEY_UP))
{
if (vp > 0)
{
vp--;
speak(vn[vp]);
}
}
if (key_pressed(KEY_DOWN))
{
if (vp < vn.length - 1)
{
vp++;
speak(vn[vp]);
}
}
if (key_pressed(KEY_RETURN))
{
return vp;
}
if (key_pressed(KEY_ESCAPE))
{
speak("현재 음성 엔진을 유지합니다.");
return this.voice;
}
}
return -1;
}
bool& save()
{
// Save our properties.
if (!fl.open(filename, "wb")) return false_t;
fl.write(voice + ";;" + rate + ";;" + pitch + ";;" + volume + ";;" + mode);
fl.close();
return true_t;
}
bool& load()
{
// Load our properties.
if (!fl.open(filename, "rb")) return false_t;
d = fl.read();
fl.close();
string[]@ d2 = string_split(d, ";;", true);
if (d2.length != 5) return false_t;
voice = string_to_number(d2[0]);
rate = string_to_number(d2[1]);
pitch = string_to_number(d2[2]);
volume = string_to_number(d2[3]);
mode = string_to_number(d2[4]);
set_voice(voice);
t.rate = rate;
t.pitch = pitch;
t.volume = volume;
return true_t;
}
void set_speech_params(int r, int p, int v)
{
// Set the parameters for the tts voice. R is rate, P is pitch, V is volume.
t.pitch = p;
t.volume = v;
t.rate = r;
rate = r;
pitch = p;
volume = v;
}
void set_speech_mode(int m)
{
// Set the speech mode. 0 is auto, 1 is SAPI.
mode = m;
}
// I think that's it. If you need anything else implemented, let me know.
}