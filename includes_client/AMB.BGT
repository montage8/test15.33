bool sourcechange = false;

source@[] sources(0);
class source
{
int source_sound = -1;
int minx, maxx, miny, maxy, minz, maxz;
double center_x, center_y, center_z, size_x, size_y, size_z;
string soundfile;
bool paused = true;
int id = -1;
bool force_paused = false;
string tile;
double volume = 100.0;
bool& check()
{
if (abs(center_x - mr.x) > (size_x + 75)) return true_t;
if (abs(center_y - mr.y) > (size_y + 75)) return true_t;
if (abs(center_z - me.z) > (size_z + 75)) return true_t;
return false_t;
}
}

amb@[] ambs;
class amb
{
bool remove = false;
int id = -1;
int minx, maxx, miny, maxy, minz, maxz;
double center_x, center_y, center_z, size_x, size_y, size_z;
sound loop;
bool force_paused = false;
dictionary@ bounds;
string[]@ sounds;
int current = 0;
int loopmin = 0;
int loopmax = 0;
int nextlooptime = 0;
timer looptimer;
int looplimit = 0;
int loopcount = 1;
bool random_play = true;
bool is_a_pause_timer = true;
int volume = 100;

bool& update()
{
if (this.loop.playing)
{
if (this.minx <= mr.x and this.maxx >= mr.x and this.miny <= mr.y and this.maxy >= mr.y and this.minz <= me.z and this.maxz >= me.z)
{
int vol = get_sound_boundary_volume(this.bounds, my_sb);
if (vol < 50)
{
this.loop.volume = (this.volume - 100) - vol;
return true_t;
}
}
this.loop.pause();
if (this.is_a_pause_timer) this.looptimer.force(0);
return true_t;
}
else
{
if (this.minx > mr.x or this.maxx < mr.x or this.miny > mr.y or this.maxy < mr.y or this.minz > me.z or this.maxz < me.z) return true_t;
if (this.sounds.length > 1)
{
if (this.looptimer.elapsed < this.nextlooptime) return true_t;
if (this.looplimit > 0)
{
if (this.loopcount >= this.looplimit) return false_t;
}
this.loopcount++;
if (this.trackcheck())
{
string filename = this.sounds[this.current];
if (string_left(filename, 2) == out_bound_delimiter) filename = string_trim_left(filename, 2);
this.loop.close();
if (!sound_load(this.loop, filename + ".ogg")) return true_t;
}
}
int vol = get_sound_boundary_volume(this.bounds, my_sb);
if (vol >= 50) return true_t;
this.loop.volume = (this.volume - 100) - vol;
this.loop.play_looped();
}
return true_t;
}

bool trackcheck()
{
this.looptimer.force(0);
this.nextlooptime = random(this.loopmin, this.loopmax);
int new = 0;
if (this.random_play) new = random(0, this.sounds.length - 1);
else
{
new = current + 1;
if (new == this.sounds.length) new = 0;
}
if (new == current) return false_t;
current = new;
return true_t;
}
}

void ambloop()
{
for (int i = ambs.length - 1; i > -1; i--)
{
amb@ temp = ambs[i];
if (ambs[i].force_paused) continue;
if (!ambs[i].update()) ambs.remove_at(i);
}
}

void destroy_all_sources()
{
sources.resize(0);
sourcepool.destroy_all();
int ambslength = ambs.length;
for (uint i = 0; i < ambslength; i++)
{
ambs[i].loop.close();
}
ambs.resize(0);
}

void pause_all_sources()
{
int sourcelength = sources.length;
int ambslength = ambs.length;
for (uint i = 0; i < sourcelength; i++)
{
source@ temp = sources[i];
temp.force_paused = true;
sourcepool.pause_sound(temp.source_sound);
}
for (uint i = 0; i < ambslength; i++)
{
amb@ temp = ambs[i];
temp.force_paused = true;
if (temp.loop.playing) temp.loop.pause();
}
}

void resume_all_sources()
{
int sourcelength = sources.length;
for (uint i = 0; i < sourcelength; i++)
{
source@ temp = sources[i];
temp.force_paused = false;
sourcepool.resume_sound(temp.source_sound);
}
for (int i = ambs.length - 1; i > -1; i--)
{
ambs[i].force_paused = false;
}
}

void spawn_source(int minx, int maxx, int miny, int maxy, int minz, int maxz, const string& in soundfile, bool paused = false, int id = -1, double volume = 100.0)
{
if (preload_mode == 2)
{
string[]@ data = string_split(soundfile, "*", false);
string[]@ sounds = string_split(data[0], "|", false);
int soundslength = sounds.length;
for (uint i = 0; i < soundslength; i++)
{
if (string_right(sounds[i], 4) != ".ogg") sounds[i] += ".ogg";
if (map_preload.exists(sounds[i])) continue;
sound new;
if (new.load(sndfolder + sounds[i])) map_preload.set(sounds[i], @ new);
}
}
source ss;
ss.center_x = (minx + maxx) * 0.5;
ss.size_x = abs(ss.center_x - minx);
ss.minx = ss.center_x - ss.size_x;
ss.maxx = ss.center_x + ss.size_x;
ss.center_y = (miny + maxy) * 0.5;
ss.size_y = abs(ss.center_y - miny);
ss.miny = ss.center_y - ss.size_y;
ss.maxy = ss.center_y + ss.size_y;
ss.center_z = (minz + maxz) * 0.5;
ss.size_z = abs(ss.center_z - minz);
ss.minz = ss.center_z - ss.size_z;
ss.maxz = ss.center_z + ss.size_z;
ss.volume = volume;
ss.soundfile = soundfile + ".ogg";
ss.source_sound = sourcepool.play_3d(ss.soundfile, ss.center_x, ss.center_y, ss.center_z, true, false, ss.size_x, ss.size_x, ss.size_y, ss.size_y, ss.size_z, ss.size_z, 0, 0, (volume - 100));
ss.id = id;
ss.force_paused = paused;
if (paused)
{
sourcepool.pause_sound(ss.source_sound);
}
sources.insert_last(ss);
}

void destroy_source(int id)
{
if (id < 0) return;
for (int i = sources.length - 1; i > -1; i--)
{
source@ temp = sources[i];
if (temp.id != id) continue;
if (temp.source_sound > -1) sourcepool.destroy_sound(temp.source_sound);
sources.remove_at(i);
}
}

void create_amb(int minx, int maxx, int miny, int maxy, int minz, int maxz, const string& in sn, int volume = 100, int id = -1)
{
if (id > -1) destroy_amb(id);
amb am;
string[]@ data = string_split(sn, "*", false);
@ am.sounds = string_split(data[0], "|", false);
string real_sn;
int datalength = data.length;
int soundslength = am.sounds.length;
if (datalength < 2 and soundslength < 2) real_sn = sn;
else
{
if (am.random_play) am.current = random(0, am.sounds.length - 1);
if (datalength > 1)
{
string[]@ parsed = string_split(data[1], "|", false);
am.loopmin = string_to_number(parsed[0]);
am.loopmax = (parsed.length > 1 ? string_to_number(parsed[1]) : am.loopmin);
am.nextlooptime = random(am.loopmin, am.loopmax);
}
if (datalength > 2) am.looplimit = string_to_number(data[2]);
if (datalength > 3)
{
int tempflag = string_to_number(data[3]);
am.random_play = (tempflag & 1 >= 1);
am.is_a_pause_timer = (tempflag & 2 >= 2);
}
}
if (preload_mode == 2)
{
int amslength = am.sounds.length;
for (uint i = 0; i < amslength; i++)
{
if (map_preload.exists(am.sounds[i] + ".ogg")) continue;
sound new;
if (new.load(sndfolder + am.sounds[i] + ".ogg")) map_preload.set(am.sounds[i] + ".ogg", @ new);
}
}
if (!sound_load(am.loop, am.sounds[am.current] + ".ogg")) return;
am.center_x = (minx + maxx) * 0.5;
am.size_x = abs(am.center_x - minx);
am.minx = am.center_x - am.size_x;
am.maxx = am.center_x + am.size_x;
am.center_y = (miny + maxy) * 0.5;
am.size_y = abs(am.center_y - miny);
am.miny = am.center_y - am.size_y;
am.maxy = am.center_y + am.size_y;
am.center_z = (minz + maxz) * 0.5;
am.size_z = abs(am.center_z - minz);
am.minz = am.center_z - am.size_z;
am.maxz = am.center_z + am.size_z;
@ am.bounds = get_sound_boundary_names(am.center_x, am.size_x, am.center_y, am.size_y, am.center_z, am.size_z);
am.volume = volume;
am.id = id;
if (am.id > -1 or am.id == -2) am.update();
ambs.insert_last(am);
}

void destroy_amb(int id)
{
if (id < 0) return;
for (int i = ambs.length - 1; i > -1; i--)
{
amb@ temp = ambs[i];
if (temp.id != id) continue;
temp.loop.close();
ambs.remove_at(i);
}
}

void change_source_volume(int v)
{
fade_pool(sourcepool, 0.25, v);
}

sound_boundary@[] sbs(0);
string[]@ my_sb;
string sb_last = " ";

int bound_default_volume = 50, new_bound_default_volume = 50;
class sound_boundary
{
int minx, maxx, miny, maxy, minz, maxz;
double center_x, center_y, center_z, size_x, size_y, size_z;
string name;
int volume = 50;
int priority = 0;
bool can_lay = true;
bool can_include = true;
}

string[]@ get_sound_boundary_names(int x, int y, int z)
{
string[] new;
int pr = 0;
int sbslength = sbs.length;
new.reserve(sbslength);
for (uint i = 0; i < sbslength; i++)
{
sound_boundary@ temp = sbs[i];
if (pr > temp.priority) continue;
if (temp.minx > x) continue;
if (temp.maxx < x) continue;
if (temp.miny > y) continue;
if (temp.maxy < y) continue;
if (temp.minz > z) continue;
if (temp.maxz < z) continue;
if (pr < temp.priority)
{
pr = temp.priority;
new.resize(0);
}
new.insert_last(temp.name);
}
if (new.is_empty()) new.insert_last("a");
return new;
}

dictionary@ get_sound_boundary_names(double center_x, double size_x, double center_y, double size_y, double center_z, double size_z)
{
dictionary new;
string last_name;
int pr = 0;
int sbslength = sbs.length;
for (uint i = 0; i < sbslength; i++)
{
sound_boundary@ temp = sbs[i];
if (pr > temp.priority) continue;
if (abs(center_x - temp.center_x) > (size_x + temp.size_x)) continue;
if (abs(center_y - temp.center_y) > (size_y + temp.size_y)) continue;
if (abs(center_z - temp.center_z) > (size_z + temp.size_z)) continue;
bool include = temp.minx > (center_x - size_x) and temp.maxx < (center_x + size_x) and temp.miny > (center_y - size_y) and temp.maxy < (center_y + size_y) and temp.minz > (center_z - size_z) and temp.maxz < (center_z + size_z);
if (!temp.can_include)
{
if (include) continue;
}
if (!temp.can_lay)
{
if (!include)
{
if (temp.minx > (center_x - size_x)) continue;
if (temp.maxx < (center_x + size_x)) continue;
if (temp.miny > (center_y - size_y)) continue;
if (temp.maxy < (center_y + size_y)) continue;
if (temp.minz > (center_z - size_z)) continue;
if (temp.maxz < (center_z + size_z)) continue;
}
}
if (pr < temp.priority)
{
pr = temp.priority;
new.delete_all();
}
new.set(temp.name, temp.volume);
last_name = temp.name;
}
if (new.is_empty())
{
new.set("a", bound_default_volume);
last_name = "a";
}
new.set(sb_last, last_name);
return new;
}

int get_sound_boundary_volume(dictionary@ temp, string[]@ listener_bounds)
{
int mysbs = listener_bounds.length;
for (uint i = 0; i < mysbs; i++)
{
if (temp.exists(listener_bounds[i])) return 0;
}
if (!temp.exists(sb_last)) return 0;
string last_name;
int tempnum = 0;
temp.get(sb_last, last_name);
temp.get(last_name, tempnum);
return tempnum;
}

void spawn_sound_boundary(int minx, int maxx, int miny, int maxy, int minz, int maxz, const string& in name, int volume = 0, int priority = 0, int flags = 0)
{
sound_boundary sb;
sb.center_x = (minx + maxx) * 0.5;
sb.size_x = abs(sb.center_x - minx);
sb.minx = sb.center_x - sb.size_x;
sb.maxx = sb.center_x + sb.size_x;
sb.center_y = (miny + maxy) * 0.5;
sb.size_y = abs(sb.center_y - miny);
sb.miny = sb.center_y - sb.size_y;
sb.maxy = sb.center_y + sb.size_y;
sb.center_z = (minz + maxz) * 0.5;
sb.size_z = abs(sb.center_z - minz);
sb.minz = sb.center_z - sb.size_z;
sb.maxz = sb.center_z + sb.size_z;
sb.name = name;
if (volume > 0 and volume < 50) sb.volume = volume;
sb.priority = priority;
if (flags & 1 > 0) sb.can_lay = false;
if (flags & 2 > 0) sb.can_include = false;
sbs.insert_last(sb);
}